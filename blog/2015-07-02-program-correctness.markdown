

## 谈程序的正确性

不管在学术界还是在工业界，总有很多人过度的关心所谓“程序的正确性”，有些甚至到了舍本逐末的地步。下面举几个例子：

  * 很多人把测试（test）看得过于重要。代码八字还没一撇呢，就吵着要怎么怎么严格的测试，防止“将来”有人把代码改错了。  * 有些人对于“使用什么语言”这个问题过度的在乎，仿佛只有用最新最酷，功能最多的语言，他们才能完成一些很基本的任务。  * 有些人过度的重视所谓“类型安全”（type safety），经常苛求手上的语言，搞一堆复杂的generics，然后抱怨语言的“类型推导”（type inference）太弱。只要看到有人用type cast就战战兢兢的，用鄙视的口气说：“这不安全”！  * 有些人走上极端，认为所有的代码都必须使用所谓“形式化方法”（formal methods），用机器定理证明的方式来确保它100%的没有错误。

这些想法貌似都非常的酷。100%可靠的代码—这是多么完美的理想！可是到最后你发现，天天念叨着要“正确性”，“可靠性”的人，几乎总是眼高手低，说的比做的多。自己没写出什么解决实际问题的代码，倒是很喜欢对别人的“代码质量”评头论足。这些人自己的代码往往复杂不堪，喜欢使用各种看似高深的奇技淫巧，用以保证所谓“正确”。他们的代码被很多所谓“测试工具”和“类型系统”捆住手脚，却仍然bug百出。

这些人其实不明白一个重要的道理：你得先写出程序，才能开始谈它的正确性。正确不等于简单，不等于优雅，不等于高效。一个不简单，不优雅，效率低的程序，就算你费尽周折证明了它的正确，它仍然不会很好的工作。这就像你得先有了房子，才能开始要求房子是安全的。想想吧，如果一个没有房子的流浪汉，路过一座没有人住的房子，他会因为这房子“不是100%安全”，而继续在野外风餐露宿吗？所以呢，写出代码就像有了房子，而代码的正确性，就像房子的安全性。写出可以解决问题的程序，永远是第一位的。而这个程序的正确性，不管它如何的重要，永远是第二位的。对程序的正确性的强调，永远不应该高于写出程序本身。

每当谈起这个问题，我就喜欢打一个比方：如果“哥德巴赫猜想”被王垠证明出来了，它会改名叫“王垠定理”吗？当然不会。它会被叫做“哥德巴赫定理”！这是因为，无论一个人多么聪明多么厉害，就算他能够证明出哥德巴赫猜想，但这个猜想并不是他最先想出来的。如果哥德巴赫没有提出这个猜想，你根本不会想到它，又何谈证明呢？所以我喜欢说，一流的数学家提出猜想，二流的数学家证明别人的猜想。同样的道理。写出解决问题的代码的人，比起那些去证明（测试）他的代码正确性的人，永远是更重要的。因为如果他没写出这段代码，你连要证明（测试）什么都不知道！

其次，我们真的需要100%正确的代码吗？99.9%行不行？除了少数像飞机自动驾驶这样的代码，我们希望它100%正确以外，其它的程序在少数时候（比如0.1%）出点问题，实际上是不会造成很严重的后果的。强求100%正确的人，往往忽视了一个重要的事实，其实很多程序只要有99%的情况下正确，就已经可以给我们带来很大的福利了。如果因为苛求那100%的正确性，而一再推迟代码的发布时机，其实是不明智的。

