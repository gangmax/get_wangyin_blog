# 为什么配置文件会变成糟糕的编程语言

From [here](https://yinwang1.substack.com/p/224).

在上一篇，我提到 Guy Steele 之前总结出的规律——任何配置文件发展到复杂的阶段，都会变成一种糟糕的编程语言。为什么这个“规律”几乎每一次都应验呢？其实我提出的一个概念可以解释这个问题，这个概念就叫「逻辑不灭定律」。

逻辑不灭定律（定义）：人需要表达的逻辑，总会在某个地方以本质相同的形式出现。

根据这个定律，如果你需要表达某个逻辑，那么它一定会出现。这个逻辑不是出现在程序里，就是出现在配置文件里，或者别的什么形式。总之，逻辑不会消失。这有点像物理的“能量守恒定律”。

为什么这个定律可以解释 Guy Steele 的这个“配置文件变编程语言”的规律呢？因为配置文件最初只是定义一些“变量”，比如 enable_optimization=true，max_requests=1000 之类的。这样程序可以读取它们的值，放进代码里面去使用。注意了，「变量」本来是编程语言最基本的构造，现在跑到了配置文件里。

配置文件发展到一定阶段，程序员就会下意识地想把程序里的某种“分支逻辑”放到配置文件里面去，比如某种用户可修改的规则判断，所以配置文件就可能会出现「条件分支」这样的结构。注意，「条件分支」也是编程语言的基本构造。

所以这样一步步的，程序员其实是在把程序里的某种逻辑往配置文件里面挪。为什么会这样呢？因为「逻辑不灭」。所以逻辑不在程序里，就会出现在配置文件里，它总要出现在某个地方。到最后，配置文件里面就充满了本质是程序的逻辑，就变成了一种程序语言。

<span>这就是为什么配置文件发展到复杂的阶段，都会变成一种糟糕的编程语言。我的《</span>[DSL 的误区](http://www.yinwang.org/blog-cn/2017/05/25/dsl)<span>》 一文里，“动态逻辑加载”一节里讲到的问题，其实就是这个问题。</span>

大部分的 DSL 都是因为需要“动态逻辑加载”这个功能，但程序员以为需要一种特别的 DSL，所以就造出一种糟糕的语言。而其实所有这些“动态逻辑加载”，需要的只不过是 if-then-else 这样的简单条件分支而已，只需要拿一种现有编程语言（比如 JavaScript）里的一部分就能实现，而不需要设计全新的语言。
